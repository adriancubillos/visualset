generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  color       String?
  items       Item[]
}

model Machine {
  id        String        @id @default(cuid())
  name      String
  type      String
  status    MachineStatus @default(AVAILABLE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  location  String
  color     String?
  pattern   String?
  tasks     Task[]
}

model Operator {
  id           String         @id @default(cuid())
  name         String         @unique
  skills       String[]
  availability Json
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  email        String?
  shift        String?
  status       OperatorStatus @default(ACTIVE)
  color        String?
  pattern      String?
  tasks        Task[]
}

model Item {
  id          String     @id @default(cuid())
  projectId   String
  name        String
  description String?
  status      ItemStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  quantity    Int        @default(1)
  project     Project    @relation(fields: [projectId], references: [id])
  tasks       Task[]
}

model Task {
  id                 String         @id @default(cuid())
  title              String
  description        String?
  status             TaskStatus     @default(IN_PROGRESS)
  machineId          String?
  operatorId         String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  itemId             String?
  completed_quantity Int            @default(0)
  quantity           Int            @default(1)
  item               Item?          @relation(fields: [itemId], references: [id])
  machine            Machine?       @relation(fields: [machineId], references: [id])
  operator           Operator?      @relation(fields: [operatorId], references: [id])
  timeSlots          TaskTimeSlot[]
}

model TaskTimeSlot {
  id            String    @id @default(cuid())
  taskId        String
  startDateTime DateTime
  endDateTime   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  durationMin   Int       @default(60)
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([startDateTime])
  @@map("task_time_slots")
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum MachineStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  BROKEN
}

enum OperatorStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum ItemStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  BLOCKED
}
