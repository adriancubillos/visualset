// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// A project containing multiple tasks
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  color       String? // Hex color code for project identification
  startDate   DateTime?
  endDate     DateTime?
  items       Item[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

// A machine in the workshop
model Machine {
  id        String        @id @default(cuid())
  name      String
  type      String
  status    MachineStatus @default(AVAILABLE)
  location  String // Physical location in workshop
  color     String? // Hex color code for visual identification
  pattern   String? // Pattern type: solid, striped, dotted, dashed
  tasks     Task[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum MachineStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  BROKEN
}

// Operator (person who works on machines/tasks)
model Operator {
  id           String         @id @default(cuid())
  name         String         @unique
  email        String? // Optional email field
  skills       String[] // e.g. ["CNC", "Welding"]
  status       OperatorStatus @default(ACTIVE)
  shift        String? // e.g. "DAY", "NIGHT", "SWING"
  availability Json // e.g. shift times { mon: "08-16", tue: "08-16" }
  color        String? // Hex color code for visual identification
  pattern      String? // Pattern type: solid, striped, dotted, dashed
  tasks        Task[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum OperatorStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

// An item within a project; each item can contain multiple tasks
model Item {
  id          String     @id @default(cuid())
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  name        String
  description String?
  status      ItemStatus @default(ACTIVE)
  quantity    Int        @default(1) // Total quantity of this item to produce
  tasks       Task[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum ItemStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

// A task/job that must be assigned
model Task {
  id                 String         @id @default(cuid())
  title              String
  description        String?
  durationMin        Int
  status             TaskStatus     @default(IN_PROGRESS)
  quantity           Int            @default(1) // Total quantity required for this task
  completed_quantity Int            @default(0) // Quantity completed so far
  item               Item?          @relation(fields: [itemId], references: [id])
  itemId             String?
  machine            Machine?       @relation(fields: [machineId], references: [id])
  machineId          String?
  operator           Operator?      @relation(fields: [operatorId], references: [id])
  operatorId         String?
  timeSlots          TaskTimeSlot[] // Multiple time slots for this task
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

// Time slots for tasks - allows multiple scheduling windows per task
model TaskTimeSlot {
  id            String    @id @default(cuid())
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        String
  startDateTime DateTime
  endDateTime   DateTime?
  isPrimary     Boolean   @default(false) // Mark one slot as primary for display
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([taskId])
  @@index([startDateTime])
  @@map("task_time_slots")
}

enum TaskStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  BLOCKED
}
