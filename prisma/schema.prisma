generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  orderNumber String? // Project order number for tracking
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  color       String?
  imageUrl    String? // URL to project image in Vercel Blob
  items       Item[]
}

model Machine {
  id           String        @id @default(cuid())
  name         String
  type         String
  status       MachineStatus @default(AVAILABLE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  location     String
  color        String?
  pattern      String?
  taskMachines TaskMachine[]
}

model Operator {
  id            String         @id @default(cuid())
  name          String         @unique
  skills        String[]
  availability  Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String?
  shift         String?
  status        OperatorStatus @default(ACTIVE)
  color         String?
  pattern       String?
  taskOperators TaskOperator[]
}

model Item {
  id          String     @id @default(cuid())
  projectId   String
  name        String
  description String?
  status      ItemStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  quantity    Int        @default(1)
  measure     String? // Measurements (e.g., "10cm x 5cm x 2cm")
  imageUrl    String? // URL to item image in Vercel Blob
  project     Project    @relation(fields: [projectId], references: [id])
  tasks       Task[]
}

model Task {
  id                 String         @id @default(cuid())
  title              String
  description        String?
  status             TaskStatus     @default(IN_PROGRESS)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  itemId             String?
  completed_quantity Int            @default(0)
  quantity           Int            @default(1)
  item               Item?          @relation(fields: [itemId], references: [id])
  timeSlots          TaskTimeSlot[]
  taskMachines       TaskMachine[]
  taskOperators      TaskOperator[]
}

model TaskMachine {
  id        String   @id @default(cuid())
  taskId    String
  machineId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  machine   Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@unique([taskId, machineId])
  @@index([taskId])
  @@index([machineId])
}

model TaskOperator {
  id         String   @id @default(cuid())
  taskId     String
  operatorId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  operator   Operator @relation(fields: [operatorId], references: [id], onDelete: Cascade)

  @@unique([taskId, operatorId])
  @@index([taskId])
  @@index([operatorId])
}

model TaskTimeSlot {
  id            String    @id @default(cuid())
  taskId        String
  startDateTime DateTime
  endDateTime   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  durationMin   Int       @default(60)
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([startDateTime])
  @@map("task_time_slots")
}

model Configuration {
  id        String                @id @default(cuid())
  category  ConfigurationCategory
  value     String                @unique
  label     String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  @@unique([category, value])
  @@index([category])
}

enum ConfigurationCategory {
  AVAILABLE_SKILLS
  MACHINE_TYPES
  TASK_TITLES
  TASK_PRIORITY
  OPERATOR_SHIFTS
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum MachineStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  BROKEN
}

enum OperatorStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum ItemStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  BLOCKED
}
